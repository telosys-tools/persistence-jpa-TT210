/*
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceException;

/**
 * JPA environment for JPA operations execution <br>
 * Provided by Telosys Tools for JPA testing
 */
public class JpaEnvironment {
	
	/**
	 * Singleton instance.
	 */
    private static volatile JpaEnvironment instance = null;

    /**
     * JPA persistence unit name.
     */
	private String persistenceUnitName ;
	
	/**
	 * JPA Entity manager factory.
	 */
	private EntityManagerFactory emf ; 
	
    /**
     * Private constructor.
     */
    private JpaEnvironment() {
        super();
    }

    /**
     * Return JpaEnvironment instance.
     * @return Return JpaEnvironment instance.
     */
    public final static JpaEnvironment getInstance() {
        if (JpaEnvironment.instance == null) {
           synchronized(JpaEnvironment.class) {
             if (JpaEnvironment.instance == null) {
            	 JpaEnvironment.instance = new JpaEnvironment();
             }
           }
        }
        return JpaEnvironment.instance;
    }
    
    /**
     * Load JPA configuration if not already loaded.
     * @param persistenceUnitName JPA persistence unit name
     */
    public void initialize(String persistenceUnitName) {
    	if(this.emf == null) {
    		this.createEntityManagerFactory(persistenceUnitName);
    	}
    }
    
    /**
     * Load JPA configuration with synchronization between threads.
     * @param persistenceUnitName JPA persistence unit name
     */
    private synchronized void createEntityManagerFactory(String persistenceUnitName) {
    	if(this.emf == null) {
			this.persistenceUnitName = persistenceUnitName ;
			this.emf = Persistence.createEntityManagerFactory(persistenceUnitName);
    	}
    }

    /**
     * Return JPA persistence unit name.
     * @return JPA persistence unit name
     */
	public final String getPersistenceUnitName() {
		return this.persistenceUnitName ;
	}
	
	/**
	 * Execute this JPA operation in a transaction which will be closed at the end of this method.
	 * @param operation JPA operation
	 * @return Results
	 * @throws PersistenceException Error
	 */
	public final Object executeWithTransaction(JpaOperation operation) throws PersistenceException {
		
		Object result = null ;
		EntityManager em = emf.createEntityManager();
		try {
			EntityTransaction transaction = em.getTransaction();

			try {
				// Begin Transaction
				transaction.begin();
				
				// Execute application JPA operation with the current EntityManager
				result = operation.exectue(em);
				
				// Commit Transaction
				transaction.commit();
				
			} finally {
				// Rollback Transaction if Transaction is still active ( Commit not done )
				if (transaction.isActive())
					transaction.rollback();
			}
		} finally {
			// Ensure EntityManager is closed 
			em.close();
		}
		
		return result ;
	}

	/**
	 * Execute this JPA operation without transaction.
	 * @param operation JPA operation
	 * @return Results
	 * @throws PersistenceException Error
	 */
	public final Object executeWithoutTransaction(JpaOperation operation) throws PersistenceException {
		
		Object result = null ;
		EntityManager em = emf.createEntityManager();
		try {
				// Execute application JPA operation with the current EntityManager
				result = operation.exectue(em);
				
		} finally {
			// Ensure EntityManager is closed 
			em.close();
		}
		
		return result ;
	}
	
    
}
